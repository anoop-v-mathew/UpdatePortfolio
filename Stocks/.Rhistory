nrow(x$Ozone[!is.na(x$Ozone)])
x$Ozone[!is.na(x$Ozone)]
length(x$Ozone[!is.na(x$Ozone)])
length(x$Ozone[is.na(x$Ozone)])
mean(subset(subset(x, Ozone>31),Temp>90)$Solar.R)
mean(subset(x, Month==6)$Temp)
subset(x,Month==5)$Ozone
subset(subset(x,(Month==5) && !is.na(x$Ozone))$Ozone,
)
subset(subset(x,(Month==5) && !is.na(x$Ozone))$Ozone
)
subset(x,(Month==5) && !is.na(x$Ozone))$Ozone
subset(x,!is.na(x$Ozone))$Ozone
subset(x,!is.na(x$Ozone) && (Month==5)$Ozone
)
subset(x,!is.na(x$Ozone) && (Month==5))$Ozone
good <- complete.cases( subset(x,Month==5)$Ozone)
max(subset(x,Month==5)$Ozone[good])
max(subset(x,Month==5)$Ozone[complete.cases( subset(x,Month==5)$Ozone)])
x[Ozone>31]
x["Ozone">31]
x[x$Ozone>31]
x[x$Ozone>31, 1:6]
x[(x$Ozone>31) && (x$Temp>90), 1:6]
x[(x$Ozone>31), 1:6][x$Temp>90,1:6]
x[(x$Ozone>31), 1:6][x$Temp>90,1:6][!is.na(x$Solar.R)]
x[(x$Ozone>31), 1:6][x$Temp>90,1:6][!is.na(x$Solar.R),1:6]
subset(subset(x, Ozone>31),Temp>90)
x$Ozone>31
x[with(x,Ozone>31)]
x[with(x,Ozone>31),]
x[with(x,Ozone>31,!is.na(X$Ozone)),]
x[with(x,Ozone>31,is.na(X$Ozone)),]
x[with(x,Ozone>31,Temp>90,]
x[with(x,Ozone>31,Temp>90),]
subset(subset(x, Ozone>31 & Temp>90)
)
subset(x, Ozone>31 & Temp>90)
mean(subset(x, Ozone>31 & Temp>90)$Solar.R
)
max(subset(x,Month==5 & is.na(x$Ozone))$Ozone
)
max(subset(x,Month==5 & !is.na(x$Ozone))$Ozone)
x[x$Ozone>31,]
x[x$Ozone>31 & !is.na(x$Ozone),]
mean(x[x$Ozone>31 & !is.na(x$Ozone),]$Ozone)
mean(x[x$Ozone>31 & !is.na(x$Ozone) & x$Temp>90,]$Ozone)
mean(x[x$Ozone>31 & !is.na(x$Ozone) & x$Temp>90,]$Solar.R)
mean(subset(x, Ozone>31 & Temp>90)$Solar.R)
mean(x[x$Ozone>31 & x$Temp>90,]$Solar.R)
subset(x, Ozone>31 & Temp>90)$Solar.R
subset(x, Ozone>31 & Temp>80)$Solar.R
mean(subset(x, Ozone>31 & Temp>80)$Solar.R)
mean(subset(x, Ozone>31 & Temp>80 & !is.na(Ozone)$Solar.R)
)
mean(subset(x, Ozone>31 & Temp>80 & !is.na(Ozone))$Solar.R)
mean(subset(x, Ozone>31 & Temp>80 & !is.na(Solar.R))$Solar.R)
subset(x, Ozone>31 & Temp>80 & !is.na(Solar.R))$Solar.R
subset(x, Ozone>31 & Temp>90 & !is.na(Solar.R))$Solar.R
subset(x, Ozone>31 & Temp<=90 & Temp>80 !is.na(Solar.R))$Solar.R
subset(x, Ozone>31 & Temp<=90 & Temp>80 & !is.na(Solar.R))$Solar.R
swirl()
library(swirl)
swirl()
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect > 6
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Anoop")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(c(1,2,3),c("X", "Y", "Z"),sep="")
paste(1:3,c("X", "Y", "Z"),sep="")
paste(LETTERS, 1:4, sep="-")
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[x(-2,-10)]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11, bar=2, norf=NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?"matrix"
?matrix
my_matrix2 <- matrix(1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients("Bill","Gina","Kelly","Sean")
patients <- c("Bill","Gina","Kelly","Sean")
cbind()
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5>8 || 6!=8 && 4>3.9
isTrue(6>4)
isTRUE(6>4)
identical('twins', 'twins')
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4, div=2)
args(remainder)
submit()
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming","is","fun!")
submit()
telegram(c("I","am","going","to","be","a","Data","Scientist!"))
submit()
submit()
mad_libs(place="Riyadh", adjective="agitated", noun="cars")
submit()
'I' %p% 'love' %p% 'R!'
bye()
f <- rep(letters[1:20],10000)
v1 <- rnorm(20*10000)
v2 <- 1:(20*10000)
df <- data.frame(f,v1,v2)
head(f)
tail(f)
tail(v1)
tail(v2)
f <- rep(paste(c(letters[1:26]), c(letters[1:26]), c(letters[1:26]), sep=""),10000)
head(f)
tail(f)
f <- rep(paste(c(letters[runif(1,1,26)]), c(letters[runif(1,1,26)), c(letters[runif(1,1,26)]), sep=""),10000)
f <- rep(paste(c(letters[runif(1,1,26)]), c(letters[runif(1,1,26)]), c(letters[runif(1,1,26)]), sep=""),10000)
head(f)
tail(f)
for (i in 20000) {f[i] <- paste(c(letters[runif(1,1,26)]), c(letters[runif(1,1,26)]), c(letters[runif(1,1,26)]), sep="")}
for (i in 20000) {x <- letters[runif(1,1,26)];y <- letters[runif(1,1,26)];z <- letters[runif(1,1,26)]; f[i] <- paste(x, y, z, sep="")}
f <- 1
for (i in 20000) {x <- letters[runif(1,1,26)];y <- letters[runif(1,1,26)];z <- letters[runif(1,1,26)]; f[i] <- paste(x, y, z, sep="")}
x <- runif[20000,1,6]
x <- runif(20000,1,6)
x <- runif(20000,1,26)
letters[x[5]]
letters[x[6]]
y <- runif(20000,1,26)
z <- runif(20000,1,26)
for (i in 20000) {f[i] <- paste(x[i], y[i], z[i], sep="")}
for (i in 1:20000) {f[i] <- paste(x[i], y[i], z[i], sep="")}
head(f)
for (i in 1:20000) {f[i] <- paste(letters[x[i]], letters[y[i]], letters[z[i]], sep="")}
head(f)
for (i in 1:20000) {f[i] <- paste(letters[x[i]], letters[y[i]], letters[z[i]], sep="")}
head(f,100)
head(state.division)
bye()
states <- rep(c("AK","AL","AR","AZ","CA","CO","CT","DC","DE","FL","GA","GU",
"HI","IA","ID","IL","IN","KS","KY","LA","MA","MD","ME","MI",
"MN","MO","MS","MT","NC","ND","NE","NH","NJ","NM","NV","NY",
"OH","OK","OR","PA","PR","RI","SC","SD","TN","TX","UT","VA",
"VI","VT","WA","WI","WV","WY"),10000)
x <- runif(20000,1,26)
y <- runif(20000,1,26)
z <- runif(20000,1,26)
for (i in 1:20000) {h[i] <- paste(letters[x[i]], letters[y[i]], letters[z[i]], sep="")}
mortality <- rnorm(20*10000)
v2 <- 1:(20*10000)
df <- data.frame(h,states,mortality)
states <- rep(c("AK","AL","AR","AZ","CA","CO","CT","DC","DE","FL","GA","GU",
"HI","IA","ID","IL","IN","KS","KY","LA","MA","MD","ME","MI",
"MN","MO","MS","MT","NC","ND","NE","NH","NJ","NM","NV","NY",
"OH","OK","OR","PA","PR","RI","SC","SD","TN","TX","UT","VA",
"VI","VT","WA","WI","WV","WY"),10000)
x <- runif(20000,1,26)
y <- runif(20000,1,26)
z <- runif(20000,1,26)
h <- NULL
for (i in 1:20000) {h[i] <- paste(letters[x[i]], letters[y[i]], letters[z[i]], sep="")}
mortality <- rnorm(20*10000)
v2 <- 1:(20*10000)
df <- data.frame(h,states,mortality)
states <- rep(c("AK","AL","AR","AZ","CA","CO","CT","DC","DE","FL","GA","GU",
"HI","IA","ID","IL","IN","KS","KY","LA","MA","MD","ME","MI",
"MN","MO","MS","MT","NC","ND","NE","NH","NJ","NM","NV","NY",
"OH","OK","OR","PA","PR","RI","SC","SD","TN","TX","UT","VA",
"VI","VT","WA","WI","WV","WY"),371)
x <- runif(20000,1,26)
y <- runif(20000,1,26)
z <- runif(20000,1,26)
h <- NULL
for (i in 1:20000) {h[i] <- paste(letters[x[i]], letters[y[i]], letters[z[i]], sep="")}
mortality <- rnorm(20*10000)
v2 <- 1:(20*10000)
df <- data.frame(h,states[1:20000],mortality)
head(df)
states <- rep(c("AK","AL","AR","AZ","CA","CO","CT","DC","DE","FL","GA","GU",
"HI","IA","ID","IL","IN","KS","KY","LA","MA","MD","ME","MI",
"MN","MO","MS","MT","NC","ND","NE","NH","NJ","NM","NV","NY",
"OH","OK","OR","PA","PR","RI","SC","SD","TN","TX","UT","VA",
"VI","VT","WA","WI","WV","WY"),371)
x <- runif(20000,1,26)
y <- runif(20000,1,26)
z <- runif(20000,1,26)
h <- NULL
for (i in 1:20000) {h[i] <- paste(letters[x[i]], letters[y[i]], letters[z[i]], sep="")}
mortality <- runif(20*10000,11,50)
v2 <- 1:(20*10000)
df <- data.frame(h,states[1:20000],mortality)
head(df)
s_h <- h[!is.na(h[,3]),]
s_h <- h[!is.na(h[,1]),]
s_h <- h[!is.na(df[,1]),]
s_h <- df[!is.na(df[,1]),]
head(s_h)
s_h[s_h$states.1.20000.=="AK" & s_h$mortality ==ave(s_h$mortality, s_h$states.1.20000., FUN=min), 1][1]
minh <- s_h[s_h$states.1.20000.=="AK" & s_h$mortality ==ave(s_h$mortality, s_h$states.1.20000., FUN=min), 1][1]
minh
length(s_h[s_h$states.1.20000.=="AK"])
length(s_h[s_h$states.1.20000.=="AK",])
length(s_h[s_h$states.1.20000.=="AK",1])
s_h <- s_h[sort(s_h$mortality)]
s_h <- s_h[sort(s_h$mortality),]
head(s_h,100)
s_h <- df[!is.na(df[,1]),]
ss_h <- s_h[sort(s_h$mortality,s_h$states.1.20000.,s_h$h),]
ss_h <- s_h[sort(s_h$mortality,s_h$states.1.20000.),]
ss_h <- s_h[order(s_h$mortality,s_h$states.1.20000.,s_h$h),]
head(ss_h,100)
head(ss_h[s_h$states.1.20000.=="AK"],100)
head(ss_h[s_h$states.1.20000.=="AK",],100)
head(ss_h[sz_h$states.1.20000.=="AK",],100)
head(ss_h[ss_h$states.1.20000.=="AK",],100)
minh <- s_h[s_h$states.1.20000.=="TX" & s_h$mortality ==ave(s_h$mortality, s_h$states.1.20000., FUN=min), 1][1]
minh
minh <- s_h[s_h$states.1.20000.=="TX" & s_h$mortality ==ave(s_h$mortality, s_h$states.1.20000., FUN=min), 1]
minh
str(minh)
str(df)
class(df$h) <- "character"
str(df)
head(df)
states <- rep(c("AK","AL","AR","AZ","CA","CO","CT","DC","DE","FL","GA","GU",
"HI","IA","ID","IL","IN","KS","KY","LA","MA","MD","ME","MI",
"MN","MO","MS","MT","NC","ND","NE","NH","NJ","NM","NV","NY",
"OH","OK","OR","PA","PR","RI","SC","SD","TN","TX","UT","VA",
"VI","VT","WA","WI","WV","WY"),10000)
x <- runif(20000,1,26)
y <- runif(20000,1,26)
z <- runif(20000,1,26)
h <- NULL
for (i in 1:20000) {h[i] <- paste(letters[x[i]], letters[y[i]], letters[z[i]], sep="")}
mortality <- rnorm(20*10000)
v2 <- 1:(20*10000)
df <- data.frame(as.character(h),states,mortality)
states <- rep(c("AK","AL","AR","AZ","CA","CO","CT","DC","DE","FL","GA","GU",
"HI","IA","ID","IL","IN","KS","KY","LA","MA","MD","ME","MI",
"MN","MO","MS","MT","NC","ND","NE","NH","NJ","NM","NV","NY",
"OH","OK","OR","PA","PR","RI","SC","SD","TN","TX","UT","VA",
"VI","VT","WA","WI","WV","WY"),10000)
x <- runif(20000,1,26)
y <- runif(20000,1,26)
z <- runif(20000,1,26)
h <- NULL
for (i in 1:20000) {h[i] <- paste(letters[x[i]], letters[y[i]], letters[z[i]], sep="")}
mortality <- rnorm(20*10000)
v2 <- 1:(20*10000)
df <- data.frame(as.character(h),states[1:20000],mortality)
str(df)
library(swirl)
ls()
rm(list=ls())
install_from_swirl("Getting and Cleaning Data")
swirl()
library(swirl)
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(r_arch:country)
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran,-time)
-5:20
-(5:20)
select(cran, -(x:size))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country=="US")
?Comparison
filter(cran, r_version <= "3.0.2", country=="IN")
filter(cran, country=="IN" | country=="IN")
filter(cran, country=="IN" | country=="US")
filter(cran, size>100500, r_os=="linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, (ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size+1000)
summarize(cran, avg_bytes = mean(size))
swirl()
library(swirl)
rm(list = ls())
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
view(top_counts)
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, count > 465)
top_unique <- filter(pack_sum, unique> 465)
view(top_unique)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
library(rstudioapi)
version
install.packages("read.fwf")
read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", skip=3, header = TRUE)
read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", c(15,4,9,4,9,4,9,4,4),skip=3, header = TRUE)
nino <- read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", c(15,4,9,4,9,4,9,4,4),skip=3, header = TRUE)
nino <- read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", c(15,4,9,4,9,4,9,4,4),skip=4, header = TRUE)
nino <- read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", c(15,4,9,4,9,4,9,4,4),skip=5)
head(nino)
sum(nino$V4)
nino <- read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", c(15,4,9,4,9,4,9,4,4),skip=4)
sum(nino$V4)
swirl()
swirl
package swirl()
library(swirl)
rm(list=ls())
swirl()
ls()
q()
code
XMLcode <- readLines(con)
con <- url("http://finance.yahoo.com/webservice/v1/symbols/HDFCEQUITYAC.BO/quote")
XMLcode <- readLines(con)
close(con)
XMLcode
source('~/GitHub/R-Workspace/DataSpecialization/Get_MF_NAV.r')
source('~/GitHub/R-Workspace/DataSpecialization/Get_MF_NAV.r')
source('~/GitHub/R-Workspace/DataSpecialization/Get_MF_NAV.r')
source('~/GitHub/R-Workspace/DataSpecialization/Get_MF_NAV.r')
source('~/GitHub/R-Workspace/DataSpecialization/Get_MF_NAV.r')
source('~/GitHub/R-Workspace/DataSpecialization/Get_MF_NAV.r')
source('~/GitHub/R-Workspace/DataSpecialization/Get_MF_NAV.r')
source('~/GitHub/R-Workspace/DataSpecialization/Get_MF_NAV.r')
source('~/GitHub/R-Workspace/DataSpecialization/Get_MF_NAV.r')
source('~/GitHub/R-Workspace/DataSpecialization/Get_MF_NAV.r')
source('~/GitHub/R-Workspace/DataSpecialization/Get_MF_NAV.r')
source('~/GitHub/R-Workspace/DataSpecialization/Get_MF_NAV.r')
source('~/GitHub/R-Workspace/DataSpecialization/Get_MF_NAV.r')
source('~/GitHub/R-Workspace/DataSpecialization/Get_MF_NAV.r')
source('~/GitHub/R-Workspace/DataSpecialization/Get_MF_NAV.r')
source('~/GitHub/R-Workspace/DataSpecialization/Get_MF_NAV.r')
source('~/GitHub/R-Workspace/DataSpecialization/Get_MF_NAV.r')
source('~/GitHub/R-Workspace/DataSpecialization/Get_MF_NAV.r')
source('~/GitHub/R-Workspace/DataSpecialization/Get_MF_NAV.r')
source('~/GitHub/R-Workspace/DataSpecialization/Get_MF_NAV.r')
source('~/GitHub/R-Workspace/DataSpecialization/Get_MF_NAV.r')
source('~/GitHub/R-Workspace/DataSpecialization/Get_MF_NAV.r')
source('~/GitHub/R-Workspace/DataSpecialization/Get_MF_NAV.r')
source('~/GitHub/R-Workspace/DataSpecialization/Get_MF_NAV.r')
source('~/GitHub/R-Workspace/DataSpecialization/Get_MF_NAV.r')
source('~/GitHub/R-Workspace/DataSpecialization/Get_MF_NAV.r')
source('~/GitHub/R-Workspace/DataSpecialization/Get_MF_NAV.r')
source('~/GitHub/R-Workspace/DataSpecialization/Get_MF_NAV.r')
source('~/GitHub/R-Workspace/DataSpecialization/Get_MF_NAV.r')
source('~/GitHub/R-Workspace/DataSpecialization/Get_MF_NAV.r')
source('~/GitHub/R-Workspace/DataSpecialization/Get_MF_NAV.r')
source('~/GitHub/R-Workspace/DataSpecialization/Get_MF_NAV.r')
source('~/GitHub/R-Workspace/DataSpecialization/Get_MF_NAV.r')
source('~/GitHub/R-Workspace/DataSpecialization/Get_MF_NAV.r')
source('~/GitHub/R-Workspace/DataSpecialization/Get_MF_NAV.r')
source('~/GitHub/R-Workspace/DataSpecialization/Get_MF_NAV.r')
source('~/GitHub/R-Workspace/DataSpecialization/Get_MF_NAV.r')
source('~/GitHub/R-Workspace/DataSpecialization/Get_MF_NAV.r')
source('~/GitHub/R-Workspace/DataSpecialization/Get_MF_NAV.r')
source('~/GitHub/R-Workspace/DataSpecialization/Get_MF_NAV.r')
source('~/GitHub/R-Workspace/DataSpecialization/Get_MF_NAV.r')
source('~/GitHub/R-Workspace/DataSpecialization/Get_MF_NAV.r')
source('~/GitHub/R-Workspace/DataSpecialization/Get_MF_NAV.r')
source('~/GitHub/R-Workspace/DataSpecialization/Get_MF_NAV.r')
source('~/GitHub/R-Workspace/DataSpecialization/Get_MF_NAV.r')
source('~/GitHub/R-Workspace/DataSpecialization/Get_MF_NAV.r')
source('~/GitHub/R-Workspace/DataSpecialization/Get_MF_NAV.r')
source('~/GitHub/R-Workspace/DataSpecialization/Get_MF_NAV.r')
source('~/GitHub/R-Workspace/DataSpecialization/Get_MF_NAV.r')
source('~/GitHub/R-Workspace/DataSpecialization/Get_MF_NAV.r')
source('~/GitHub/R-Workspace/UpdatePortfolio/Stocks/PrintPortfolioGrowth.R')
source('~/GitHub/R-Workspace/UpdatePortfolio/Stocks/PrintPortfolioGrowth.R')
source('~/GitHub/R-Workspace/UpdatePortfolio/Stocks/PrintPortfolioGrowth.R')
source('~/GitHub/R-Workspace/UpdatePortfolio/Stocks/PrintPortfolioGrowth.R')
source('~/GitHub/R-Workspace/UpdatePortfolio/Stocks/PrintPortfolioGrowth.R')
source('~/GitHub/R-Workspace/UpdatePortfolio/Stocks/PrintPortfolioGrowth.R')
source('~/GitHub/R-Workspace/UpdatePortfolio/Stocks/PrintPortfolioGrowth.R')
source('~/GitHub/R-Workspace/UpdatePortfolio/Stocks/PrintPortfolioGrowth.R')
source('~/GitHub/R-Workspace/UpdatePortfolio/Stocks/PrintPortfolioGrowth.R')
source('~/GitHub/R-Workspace/UpdatePortfolio/Stocks/PrintPortfolioGrowth.R')
source('~/GitHub/R-Workspace/UpdatePortfolio/Stocks/PrintPortfolioGrowth.R')
source('~/GitHub/R-Workspace/UpdatePortfolio/Stocks/PrintPortfolioGrowth.R')
source('~/GitHub/R-Workspace/UpdatePortfolio/Stocks/PrintPortfolioGrowth.R')
source('~/GitHub/R-Workspace/UpdatePortfolio/Stocks/PrintPortfolioGrowth.R')
source('~/GitHub/R-Workspace/UpdatePortfolio/Stocks/PrintPortfolioGrowth.R')
source('~/GitHub/R-Workspace/UpdatePortfolio/Stocks/PrintPortfolioGrowth.R')
